/*
 * Copyright 2020 - present Maksym Ostroverkhov.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "application"
}

description = "Netty based implementation of rfc8441 - bootstrapping websockets with http/2. Performance test project"

dependencies {
    implementation project(":netty-websocket-http2")
    implementation project(":netty-websocket-http2-callbacks-codec")
    implementation "io.netty:netty-transport-classes-epoll"
    implementation "io.netty:netty-transport-classes-kqueue"
    implementation "org.hdrhistogram:HdrHistogram"
    implementation "org.slf4j:slf4j-api"

    runtimeOnly "io.netty:netty-tcnative-boringssl-static::${osdetector.classifier}"
    runtimeOnly "ch.qos.logback:logback-classic"
    if (osdetector.os == "linux") {
        runtimeOnly "io.netty:netty-transport-native-epoll::${osdetector.classifier}"
    } else if (osdetector.os == "osx") {
        runtimeOnly "io.netty:netty-transport-native-kqueue::${osdetector.classifier}"
    }
}

task runServerMessages(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.messagecodec.server.Main"
}

task runClientMessages(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.messagecodec.client.Main"
}

task runServerCallbacks(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.callbackscodec.server.Main"
}

task runClientCallbacks(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.callbackscodec.client.Main"
}

task runServerBulk(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.bulkcodec.server.Main"
}

task runClientBulk(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.bulkcodec.client.Main"
}

task serverMessagesScripts(type: CreateStartScripts) {
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.messagecodec.server.Main"
    applicationName = "${project.name}-messages-server"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

task clientMessagesScripts(type: CreateStartScripts) {
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.messagecodec.client.Main"
    applicationName = "${project.name}-messages-client"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

task serverCallbacksScripts(type: CreateStartScripts) {
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.callbackscodec.server.Main"
    applicationName = "${project.name}-callbacks-server"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

task clientCallbacksScripts(type: CreateStartScripts) {
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.callbackscodec.client.Main"
    applicationName = "${project.name}-callbacks-client"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

task serverBulkScripts(type: CreateStartScripts) {
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.bulkcodec.server.Main"
    applicationName = "${project.name}-bulk-server"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

task clientBulkScripts(type: CreateStartScripts) {
    mainClass = "com.jauntsdn.netty.handler.codec.http2.websocketx.perftest.bulkcodec.client.Main"
    applicationName = "${project.name}-bulk-client"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

startScripts.dependsOn serverMessagesScripts
startScripts.dependsOn clientMessagesScripts
startScripts.dependsOn serverCallbacksScripts
startScripts.dependsOn clientCallbacksScripts
startScripts.dependsOn serverBulkScripts
startScripts.dependsOn clientBulkScripts

tasks.named("startScripts") {
    enabled = false
}